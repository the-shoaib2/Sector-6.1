generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique 
  password            String?      
  token               String?      
  refreshToken        String?      
  refreshTokenExpiry  DateTime?    
  twoFactorVerified   Boolean      @default(false)
  twoFactorSecret     String?      
  isVerified          Boolean      @default(false)
  providerId          String?      
  providerType        String?      
  role                String       @default("user")
  userProfile         UserProfile?
  devices             Device[]     
  whitelistIPs        WhitelistIP[] @relation("UserWhitelistIPs")
  loginSessions       LoginSession[]
  loginAttempts       LoginAttempt[]
  passkeys            Passkey[]
  verificationAttempt VerificationAttempt[]
  verification        Verification[]
  lastLogin           DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  chatRoomMembers     ChatRoomMember[]
  messages            Message[] 
  accountExpiryDate   DateTime? 
}

model VerificationAttempt {
  id                  String       @id @default(uuid())
  userId              String
  attempts            Int          @default(0)
  lastAttempt         DateTime     @default(now())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  cooldownEnd         DateTime? 
  user                User         @relation(fields: [userId], references: [id])
}

model Verification {
  id                  String       @id @default(uuid())
  userId              String
  code                String       @unique
  expiresAt           DateTime     @default(now())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  verified            Boolean      @default(false)
  user                User         @relation(fields: [userId], references: [id])
}


model UserProfile {
  id                  String       @id @default(uuid())
  userId              String       @unique
  firstName           String
  lastName            String
  phone               String?
  dob                 DateTime?
  gender              String?
  profilePictureUrl   String?
  bio                 String?
  socialMediaUrl      String?
  friends             String[]
  unfriends           String[]
  following           String[]
  followers           String[]
  blockedUsers        String[]
  chatRooms           String[]
  groups              String[]
  user                User          @relation(fields: [userId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Friend {
  id                  String       @id @default(uuid())
  userId              String
  friendId            String
  status              String
  friendOfFriendId    String[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model FriendRequest {
  id                  String       @id @default(uuid())
  userId              String
  friendId            String
  status              String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Follow {
  id                  String       @id @default(uuid())
  userId              String
  followingId         String
  status              String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Follower {
  id                  String       @id @default(uuid())
  userId              String
  followerId          String
  status              String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model BlockedUser {
  id                  String       @id @default(uuid())
  userId              String
  blockedUserId       String
  status              String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model ChatRoom {
  id                  String       @id @default(uuid())
  roomId              String
  roomName            String
  roomType            RoomType
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  messages            Message[]    
}

enum RoomType {
  INDIVIDUAL
  TEMPORARY
  LIVE_STREAM
  PUBLIC
  GROUPS
}

model ChatRoomMember {
  id                  String       @id @default(uuid())
  roomId              String
  userId              String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  user                User         @relation(fields: [userId], references: [id])
}

model Group {
  id                  String       @id @default(uuid())
  groupId             String
  groupName           String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Message {
  id                  String       @id @default(uuid())
  roomId              String
  userId              String
  message             String
  replyToMessageId    String?
  reactions           String[]
  status              MessageStatus
  type                MessageType
  isDeleted           Boolean      @default(false)
  isEdited            Boolean      @default(false)
  isRead              Boolean      @default(false)
  isForwarded         Boolean      @default(false)
  isPinned            Boolean      @default(false)
  isStarred           Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  chatRoom            ChatRoom     @relation(fields: [roomId], references: [id])
  user                User         @relation(fields: [userId], references: [id])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model Device {
  id                  String       @id @default(uuid())
  userId              String
  ip                  String
  mac                 String
  location            String
  isWhitelisted       Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  loginAttempts       LoginAttempt[]
  loginSessions       LoginSession[]
  user                User         @relation(fields: [userId], references: [id])
}

enum DeviceType {
  MOBILE
  DESKTOP
  TABLET
  OTHER
}

model WhitelistIP {
  id                  String       @id @default(uuid())
  ip                  String
  userId              String
  deviceId            String?
  sessionId           String?
  expiresAt           DateTime
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  user                User         @relation(fields: [userId], references: [id], name: "UserWhitelistIPs")
}

model LoginSession {
  id                  String       @id @default(uuid())
  userId              String
  ip                  String
  deviceId            String?
  token               String?      
  sessionId           String?
  expiresAt           DateTime
  createdAt           DateTime     @default(now())
  user                User         @relation(fields: [userId], references: [id])
  device              Device?      @relation(fields: [deviceId], references: [id])
}

model LoginAttempt {
  id                  String       @id @default(uuid())
  userId              String?
  ip                  String
  deviceId            String?      
  attemptType         String
  webAuthnId          String?
  verificationId      String?
  origin              String?
  isSuccess           Boolean      
  createdAt           DateTime     @default(now())
  user                User?        @relation(fields: [userId], references: [id])
  device              Device?      @relation(fields: [deviceId], references: [id])
}

model Passkey {
  id                  String       @id @default(uuid())
  userId              String
  passkeyId           String       @unique
  name                String       
  type                String
  transports          String[]
  authenticatorId     String
  counter             Int
  excludeCredentials  String[]
  credentialPublicKey String
  credentialIDHash    String
  publicKey           String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  user                User         @relation(fields: [userId], references: [id])
}
